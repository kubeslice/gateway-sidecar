syntax = "proto3";

package sidecar;
option go_package = "./;sidecar";


// Token represents the ID Token message format.
message Token {
    // ID Token value
    string idToken = 1;
}

// SidecarResponse represents the Sidecar response format.
message SidecarResponse {
    string statusMsg = 1;
}

// Status of the Pod.
enum Status {
  POD_INITIALIZING = 0;
  POD_HEALTHY = 1;
  POD_UNHEALTHY = 2;
  POD_INVALID_TOKEN = 3;
}

// slice gateway-host-type
enum SliceGwHostType {
    SLICE_GW_SERVER = 0;
    SLICE_GW_CLIENT = 1;
}

// TcType represents Traffic Control Type.
enum TcType {
    BANDWIDTH_CONTROL = 0;
}

//
enum ClassType {
    HTB = 0;
    TBF = 1;
}

// Generic event types enum
enum EventType {
    EV_CREATE = 0;
    EV_UPDATE = 1;
    EV_DELETE = 2;
}

// Slice QoS Profile 
message SliceQosProfile {
    // Name of the slice
    string sliceName = 1;
    // Slice Identifier
    string sliceId = 2;
    // Name of the QoS profile attached to the slice
    string qosProfileName = 3;
    // TC type -  Bandwidth control
    TcType tcType = 4;
    // ClassType - HTB   ( HTB)
    ClassType ClassType = 5;
    // Bandwidth Ceiling in Mbps  - 5 Mbps (100k - 100 Mbps)
    uint32 bwCeiling = 6;
    // Bandwidth Guaranteed -  1 Mbps ( 100k- 100 Mbps)
    uint32 bwGuaranteed = 7;
    // Priority - 2 (Number 0-3)
    uint32 priority = 8;
    // Dscp class to mark inter cluster traffic
    string dscpClass = 9;
}

// Slice event message
message SliceLifeCycleEvent {
    // Name of the slice
    string sliceName = 1;
    // Event type
    EventType event = 2;
}

