// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/sidecar/sidecarpb/gw_sidecar.proto

package sidecar

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/empty"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// slice gateway-host-type
type SliceGwHostType int32

const (
	SliceGwHostType_SLICE_GW_SERVER SliceGwHostType = 0
	SliceGwHostType_SLICE_GW_CLIENT SliceGwHostType = 1
)

var SliceGwHostType_name = map[int32]string{
	0: "SLICE_GW_SERVER",
	1: "SLICE_GW_CLIENT",
}

var SliceGwHostType_value = map[string]int32{
	"SLICE_GW_SERVER": 0,
	"SLICE_GW_CLIENT": 1,
}

func (x SliceGwHostType) String() string {
	return proto.EnumName(SliceGwHostType_name, int32(x))
}

func (SliceGwHostType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0d079cb73cd13d5, []int{0}
}

// TcType represents Traffic Control Type.
type TcType int32

const (
	TcType_BANDWIDTH_CONTROL TcType = 0
)

var TcType_name = map[int32]string{
	0: "BANDWIDTH_CONTROL",
}

var TcType_value = map[string]int32{
	"BANDWIDTH_CONTROL": 0,
}

func (x TcType) String() string {
	return proto.EnumName(TcType_name, int32(x))
}

func (TcType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0d079cb73cd13d5, []int{1}
}

type ClassType int32

const (
	ClassType_HTB ClassType = 0
	ClassType_TBF ClassType = 1
)

var ClassType_name = map[int32]string{
	0: "HTB",
	1: "TBF",
}

var ClassType_value = map[string]int32{
	"HTB": 0,
	"TBF": 1,
}

func (x ClassType) String() string {
	return proto.EnumName(ClassType_name, int32(x))
}

func (ClassType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0d079cb73cd13d5, []int{2}
}

type TunnelStatusType int32

const (
	TunnelStatusType_GW_TUNNEL_STATE_UP   TunnelStatusType = 0
	TunnelStatusType_GW_TUNNEL_STATE_DOWN TunnelStatusType = 1
)

var TunnelStatusType_name = map[int32]string{
	0: "GW_TUNNEL_STATE_UP",
	1: "GW_TUNNEL_STATE_DOWN",
}

var TunnelStatusType_value = map[string]int32{
	"GW_TUNNEL_STATE_UP":   0,
	"GW_TUNNEL_STATE_DOWN": 1,
}

func (x TunnelStatusType) String() string {
	return proto.EnumName(TunnelStatusType_name, int32(x))
}

func (TunnelStatusType) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_a0d079cb73cd13d5, []int{3}
}

// SidecarResponse represents the Sidecar response format.
type SidecarResponse struct {
	StatusMsg            string   `protobuf:"bytes,1,opt,name=statusMsg,proto3" json:"statusMsg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SidecarResponse) Reset()         { *m = SidecarResponse{} }
func (m *SidecarResponse) String() string { return proto.CompactTextString(m) }
func (*SidecarResponse) ProtoMessage()    {}
func (*SidecarResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0d079cb73cd13d5, []int{0}
}

func (m *SidecarResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SidecarResponse.Unmarshal(m, b)
}
func (m *SidecarResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SidecarResponse.Marshal(b, m, deterministic)
}
func (m *SidecarResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SidecarResponse.Merge(m, src)
}
func (m *SidecarResponse) XXX_Size() int {
	return xxx_messageInfo_SidecarResponse.Size(m)
}
func (m *SidecarResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SidecarResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SidecarResponse proto.InternalMessageInfo

func (m *SidecarResponse) GetStatusMsg() string {
	if m != nil {
		return m.StatusMsg
	}
	return ""
}

// Slice QoS Profile
type SliceQosProfile struct {
	// Name of the slice
	SliceName string `protobuf:"bytes,1,opt,name=sliceName,proto3" json:"sliceName,omitempty"`
	// Slice Identifier
	SliceId string `protobuf:"bytes,2,opt,name=sliceId,proto3" json:"sliceId,omitempty"`
	// Name of the QoS profile attached to the slice
	QosProfileName string `protobuf:"bytes,3,opt,name=qosProfileName,proto3" json:"qosProfileName,omitempty"`
	// TC type -  Bandwidth control
	TcType TcType `protobuf:"varint,4,opt,name=tcType,proto3,enum=sidecar.TcType" json:"tcType,omitempty"`
	// ClassType - HTB   ( HTB)
	ClassType ClassType `protobuf:"varint,5,opt,name=ClassType,proto3,enum=sidecar.ClassType" json:"ClassType,omitempty"`
	// Bandwidth Ceiling in Mbps  - 5 Mbps (100k - 100 Mbps)
	BwCeiling uint32 `protobuf:"varint,6,opt,name=bwCeiling,proto3" json:"bwCeiling,omitempty"`
	// Bandwidth Guaranteed -  1 Mbps ( 100k- 100 Mbps)
	BwGuaranteed uint32 `protobuf:"varint,7,opt,name=bwGuaranteed,proto3" json:"bwGuaranteed,omitempty"`
	// Priority - 2 (Number 0-3)
	Priority uint32 `protobuf:"varint,8,opt,name=priority,proto3" json:"priority,omitempty"`
	// Dscp class to mark inter cluster traffic
	DscpClass            string   `protobuf:"bytes,9,opt,name=dscpClass,proto3" json:"dscpClass,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SliceQosProfile) Reset()         { *m = SliceQosProfile{} }
func (m *SliceQosProfile) String() string { return proto.CompactTextString(m) }
func (*SliceQosProfile) ProtoMessage()    {}
func (*SliceQosProfile) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0d079cb73cd13d5, []int{1}
}

func (m *SliceQosProfile) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SliceQosProfile.Unmarshal(m, b)
}
func (m *SliceQosProfile) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SliceQosProfile.Marshal(b, m, deterministic)
}
func (m *SliceQosProfile) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SliceQosProfile.Merge(m, src)
}
func (m *SliceQosProfile) XXX_Size() int {
	return xxx_messageInfo_SliceQosProfile.Size(m)
}
func (m *SliceQosProfile) XXX_DiscardUnknown() {
	xxx_messageInfo_SliceQosProfile.DiscardUnknown(m)
}

var xxx_messageInfo_SliceQosProfile proto.InternalMessageInfo

func (m *SliceQosProfile) GetSliceName() string {
	if m != nil {
		return m.SliceName
	}
	return ""
}

func (m *SliceQosProfile) GetSliceId() string {
	if m != nil {
		return m.SliceId
	}
	return ""
}

func (m *SliceQosProfile) GetQosProfileName() string {
	if m != nil {
		return m.QosProfileName
	}
	return ""
}

func (m *SliceQosProfile) GetTcType() TcType {
	if m != nil {
		return m.TcType
	}
	return TcType_BANDWIDTH_CONTROL
}

func (m *SliceQosProfile) GetClassType() ClassType {
	if m != nil {
		return m.ClassType
	}
	return ClassType_HTB
}

func (m *SliceQosProfile) GetBwCeiling() uint32 {
	if m != nil {
		return m.BwCeiling
	}
	return 0
}

func (m *SliceQosProfile) GetBwGuaranteed() uint32 {
	if m != nil {
		return m.BwGuaranteed
	}
	return 0
}

func (m *SliceQosProfile) GetPriority() uint32 {
	if m != nil {
		return m.Priority
	}
	return 0
}

func (m *SliceQosProfile) GetDscpClass() string {
	if m != nil {
		return m.DscpClass
	}
	return ""
}

// TunnelInterfaceStatus represents Tunnel Interface Status.
type TunnelInterfaceStatus struct {
	// Net Interface
	NetInterface string `protobuf:"bytes,1,opt,name=netInterface,proto3" json:"netInterface,omitempty"`
	// Local IP
	LocalIP string `protobuf:"bytes,2,opt,name=localIP,proto3" json:"localIP,omitempty"`
	// Peer IP
	PeerIP string `protobuf:"bytes,3,opt,name=peerIP,proto3" json:"peerIP,omitempty"`
	// Latency
	Latency uint64 `protobuf:"varint,4,opt,name=latency,proto3" json:"latency,omitempty"`
	// Transmit Rate
	TxRate uint64 `protobuf:"varint,5,opt,name=txRate,proto3" json:"txRate,omitempty"`
	// Receive Rate
	RxRate uint64 `protobuf:"varint,6,opt,name=rxRate,proto3" json:"rxRate,omitempty"`
	//Packet loss
	PacketLoss uint64 `protobuf:"varint,7,opt,name=packetLoss,proto3" json:"packetLoss,omitempty"`
	//Status
	Status               TunnelStatusType `protobuf:"varint,8,opt,name=status,proto3,enum=sidecar.TunnelStatusType" json:"status,omitempty"`
	XXX_NoUnkeyedLiteral struct{}         `json:"-"`
	XXX_unrecognized     []byte           `json:"-"`
	XXX_sizecache        int32            `json:"-"`
}

func (m *TunnelInterfaceStatus) Reset()         { *m = TunnelInterfaceStatus{} }
func (m *TunnelInterfaceStatus) String() string { return proto.CompactTextString(m) }
func (*TunnelInterfaceStatus) ProtoMessage()    {}
func (*TunnelInterfaceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0d079cb73cd13d5, []int{2}
}

func (m *TunnelInterfaceStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TunnelInterfaceStatus.Unmarshal(m, b)
}
func (m *TunnelInterfaceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TunnelInterfaceStatus.Marshal(b, m, deterministic)
}
func (m *TunnelInterfaceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TunnelInterfaceStatus.Merge(m, src)
}
func (m *TunnelInterfaceStatus) XXX_Size() int {
	return xxx_messageInfo_TunnelInterfaceStatus.Size(m)
}
func (m *TunnelInterfaceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_TunnelInterfaceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_TunnelInterfaceStatus proto.InternalMessageInfo

func (m *TunnelInterfaceStatus) GetNetInterface() string {
	if m != nil {
		return m.NetInterface
	}
	return ""
}

func (m *TunnelInterfaceStatus) GetLocalIP() string {
	if m != nil {
		return m.LocalIP
	}
	return ""
}

func (m *TunnelInterfaceStatus) GetPeerIP() string {
	if m != nil {
		return m.PeerIP
	}
	return ""
}

func (m *TunnelInterfaceStatus) GetLatency() uint64 {
	if m != nil {
		return m.Latency
	}
	return 0
}

func (m *TunnelInterfaceStatus) GetTxRate() uint64 {
	if m != nil {
		return m.TxRate
	}
	return 0
}

func (m *TunnelInterfaceStatus) GetRxRate() uint64 {
	if m != nil {
		return m.RxRate
	}
	return 0
}

func (m *TunnelInterfaceStatus) GetPacketLoss() uint64 {
	if m != nil {
		return m.PacketLoss
	}
	return 0
}

func (m *TunnelInterfaceStatus) GetStatus() TunnelStatusType {
	if m != nil {
		return m.Status
	}
	return TunnelStatusType_GW_TUNNEL_STATE_UP
}

// NsmInterfaceStatus represents the status of NSM Interface to Slice Router.
type NsmInterfaceStatus struct {
	// NSM Interface Name
	NsmInterfaceName string `protobuf:"bytes,1,opt,name=nsmInterfaceName,proto3" json:"nsmInterfaceName,omitempty"`
	// NSM IP
	NsmIP                string   `protobuf:"bytes,2,opt,name=nsmIP,proto3" json:"nsmIP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NsmInterfaceStatus) Reset()         { *m = NsmInterfaceStatus{} }
func (m *NsmInterfaceStatus) String() string { return proto.CompactTextString(m) }
func (*NsmInterfaceStatus) ProtoMessage()    {}
func (*NsmInterfaceStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0d079cb73cd13d5, []int{3}
}

func (m *NsmInterfaceStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NsmInterfaceStatus.Unmarshal(m, b)
}
func (m *NsmInterfaceStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NsmInterfaceStatus.Marshal(b, m, deterministic)
}
func (m *NsmInterfaceStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NsmInterfaceStatus.Merge(m, src)
}
func (m *NsmInterfaceStatus) XXX_Size() int {
	return xxx_messageInfo_NsmInterfaceStatus.Size(m)
}
func (m *NsmInterfaceStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_NsmInterfaceStatus.DiscardUnknown(m)
}

var xxx_messageInfo_NsmInterfaceStatus proto.InternalMessageInfo

func (m *NsmInterfaceStatus) GetNsmInterfaceName() string {
	if m != nil {
		return m.NsmInterfaceName
	}
	return ""
}

func (m *NsmInterfaceStatus) GetNsmIP() string {
	if m != nil {
		return m.NsmIP
	}
	return ""
}

// GwPodStatus represents overall status of Pod.
type GwPodStatus struct {
	// Node IP.
	NodeIP string `protobuf:"bytes,1,opt,name=nodeIP,proto3" json:"nodeIP,omitempty"`
	// Gateway Pod IP.
	GatewayPodIP string `protobuf:"bytes,2,opt,name=gatewayPodIP,proto3" json:"gatewayPodIP,omitempty"`
	// Gateway Pod Name.
	GatewayPodName string `protobuf:"bytes,3,opt,name=gatewayPodName,proto3" json:"gatewayPodName,omitempty"`
	// The Tunnel Interface Status.
	TunnelStatus *TunnelInterfaceStatus `protobuf:"bytes,4,opt,name=tunnelStatus,proto3" json:"tunnelStatus,omitempty"`
	// NSM Interface Status
	NsmIntfStatus        *NsmInterfaceStatus `protobuf:"bytes,5,opt,name=nsmIntfStatus,proto3" json:"nsmIntfStatus,omitempty"`
	Error                *Error              `protobuf:"bytes,6,opt,name=error,proto3" json:"error,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *GwPodStatus) Reset()         { *m = GwPodStatus{} }
func (m *GwPodStatus) String() string { return proto.CompactTextString(m) }
func (*GwPodStatus) ProtoMessage()    {}
func (*GwPodStatus) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0d079cb73cd13d5, []int{4}
}

func (m *GwPodStatus) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GwPodStatus.Unmarshal(m, b)
}
func (m *GwPodStatus) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GwPodStatus.Marshal(b, m, deterministic)
}
func (m *GwPodStatus) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GwPodStatus.Merge(m, src)
}
func (m *GwPodStatus) XXX_Size() int {
	return xxx_messageInfo_GwPodStatus.Size(m)
}
func (m *GwPodStatus) XXX_DiscardUnknown() {
	xxx_messageInfo_GwPodStatus.DiscardUnknown(m)
}

var xxx_messageInfo_GwPodStatus proto.InternalMessageInfo

func (m *GwPodStatus) GetNodeIP() string {
	if m != nil {
		return m.NodeIP
	}
	return ""
}

func (m *GwPodStatus) GetGatewayPodIP() string {
	if m != nil {
		return m.GatewayPodIP
	}
	return ""
}

func (m *GwPodStatus) GetGatewayPodName() string {
	if m != nil {
		return m.GatewayPodName
	}
	return ""
}

func (m *GwPodStatus) GetTunnelStatus() *TunnelInterfaceStatus {
	if m != nil {
		return m.TunnelStatus
	}
	return nil
}

func (m *GwPodStatus) GetNsmIntfStatus() *NsmInterfaceStatus {
	if m != nil {
		return m.NsmIntfStatus
	}
	return nil
}

func (m *GwPodStatus) GetError() *Error {
	if m != nil {
		return m.Error
	}
	return nil
}

// RemoteGwVpnIP represents remote SliceGwPod VPN IP
type RemoteGwVpnIP struct {
	// Remote Slice Gateway VPN IP.
	RemoteGwVpnIP        string   `protobuf:"bytes,1,opt,name=remoteGwVpnIP,proto3" json:"remoteGwVpnIP,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RemoteGwVpnIP) Reset()         { *m = RemoteGwVpnIP{} }
func (m *RemoteGwVpnIP) String() string { return proto.CompactTextString(m) }
func (*RemoteGwVpnIP) ProtoMessage()    {}
func (*RemoteGwVpnIP) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0d079cb73cd13d5, []int{5}
}

func (m *RemoteGwVpnIP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RemoteGwVpnIP.Unmarshal(m, b)
}
func (m *RemoteGwVpnIP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RemoteGwVpnIP.Marshal(b, m, deterministic)
}
func (m *RemoteGwVpnIP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RemoteGwVpnIP.Merge(m, src)
}
func (m *RemoteGwVpnIP) XXX_Size() int {
	return xxx_messageInfo_RemoteGwVpnIP.Size(m)
}
func (m *RemoteGwVpnIP) XXX_DiscardUnknown() {
	xxx_messageInfo_RemoteGwVpnIP.DiscardUnknown(m)
}

var xxx_messageInfo_RemoteGwVpnIP proto.InternalMessageInfo

func (m *RemoteGwVpnIP) GetRemoteGwVpnIP() string {
	if m != nil {
		return m.RemoteGwVpnIP
	}
	return ""
}

// SliceGwConnectionContext - Slice Gateway Connection Context.
type SliceGwConnectionContext struct {
	// Slice-Id
	SliceId string `protobuf:"bytes,1,opt,name=sliceId,proto3" json:"sliceId,omitempty"`
	// Local slice gateway ID
	LocalSliceGwId string `protobuf:"bytes,2,opt,name=localSliceGwId,proto3" json:"localSliceGwId,omitempty"`
	// Local slice gateway VPN IP
	LocalSliceGwVpnIP string `protobuf:"bytes,3,opt,name=localSliceGwVpnIP,proto3" json:"localSliceGwVpnIP,omitempty"`
	// Local slice gateway-host-type  -  client/server
	LocalSliceGwHostType SliceGwHostType `protobuf:"varint,4,opt,name=localSliceGwHostType,proto3,enum=sidecar.SliceGwHostType" json:"localSliceGwHostType,omitempty"`
	// Local slice gateway NSM Subnet
	LocalSliceGwNsmSubnet string `protobuf:"bytes,5,opt,name=localSliceGwNsmSubnet,proto3" json:"localSliceGwNsmSubnet,omitempty"`
	// Local slice gateway Node IP
	LocalSliceGwNodeIP string `protobuf:"bytes,6,opt,name=localSliceGwNodeIP,proto3" json:"localSliceGwNodeIP,omitempty"`
	// Local slice gateway Node Port
	LocalSliceGwNodePort string `protobuf:"bytes,7,opt,name=localSliceGwNodePort,proto3" json:"localSliceGwNodePort,omitempty"`
	// Remote slice gateway ID
	RemoteSliceGwId string `protobuf:"bytes,8,opt,name=remoteSliceGwId,proto3" json:"remoteSliceGwId,omitempty"`
	// Remote slice gateway VPN IP
	RemoteSliceGwVpnIP string `protobuf:"bytes,9,opt,name=remoteSliceGwVpnIP,proto3" json:"remoteSliceGwVpnIP,omitempty"`
	// Remote-slice gateway-host-type client or server
	RemoteSliceGwHostType SliceGwHostType `protobuf:"varint,10,opt,name=remoteSliceGwHostType,proto3,enum=sidecar.SliceGwHostType" json:"remoteSliceGwHostType,omitempty"`
	// Remote slice gateway NSM subnet
	RemoteSliceGwNsmSubnet string `protobuf:"bytes,11,opt,name=remoteSliceGwNsmSubnet,proto3" json:"remoteSliceGwNsmSubnet,omitempty"`
	// Remote slice gateway Node IP
	RemoteSliceGwNodeIP string `protobuf:"bytes,12,opt,name=remoteSliceGwNodeIP,proto3" json:"remoteSliceGwNodeIP,omitempty"`
	// Remote slice gateway Node Port
	RemoteSliceGwNodePort string   `protobuf:"bytes,13,opt,name=remoteSliceGwNodePort,proto3" json:"remoteSliceGwNodePort,omitempty"`
	XXX_NoUnkeyedLiteral  struct{} `json:"-"`
	XXX_unrecognized      []byte   `json:"-"`
	XXX_sizecache         int32    `json:"-"`
}

func (m *SliceGwConnectionContext) Reset()         { *m = SliceGwConnectionContext{} }
func (m *SliceGwConnectionContext) String() string { return proto.CompactTextString(m) }
func (*SliceGwConnectionContext) ProtoMessage()    {}
func (*SliceGwConnectionContext) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0d079cb73cd13d5, []int{6}
}

func (m *SliceGwConnectionContext) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SliceGwConnectionContext.Unmarshal(m, b)
}
func (m *SliceGwConnectionContext) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SliceGwConnectionContext.Marshal(b, m, deterministic)
}
func (m *SliceGwConnectionContext) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SliceGwConnectionContext.Merge(m, src)
}
func (m *SliceGwConnectionContext) XXX_Size() int {
	return xxx_messageInfo_SliceGwConnectionContext.Size(m)
}
func (m *SliceGwConnectionContext) XXX_DiscardUnknown() {
	xxx_messageInfo_SliceGwConnectionContext.DiscardUnknown(m)
}

var xxx_messageInfo_SliceGwConnectionContext proto.InternalMessageInfo

func (m *SliceGwConnectionContext) GetSliceId() string {
	if m != nil {
		return m.SliceId
	}
	return ""
}

func (m *SliceGwConnectionContext) GetLocalSliceGwId() string {
	if m != nil {
		return m.LocalSliceGwId
	}
	return ""
}

func (m *SliceGwConnectionContext) GetLocalSliceGwVpnIP() string {
	if m != nil {
		return m.LocalSliceGwVpnIP
	}
	return ""
}

func (m *SliceGwConnectionContext) GetLocalSliceGwHostType() SliceGwHostType {
	if m != nil {
		return m.LocalSliceGwHostType
	}
	return SliceGwHostType_SLICE_GW_SERVER
}

func (m *SliceGwConnectionContext) GetLocalSliceGwNsmSubnet() string {
	if m != nil {
		return m.LocalSliceGwNsmSubnet
	}
	return ""
}

func (m *SliceGwConnectionContext) GetLocalSliceGwNodeIP() string {
	if m != nil {
		return m.LocalSliceGwNodeIP
	}
	return ""
}

func (m *SliceGwConnectionContext) GetLocalSliceGwNodePort() string {
	if m != nil {
		return m.LocalSliceGwNodePort
	}
	return ""
}

func (m *SliceGwConnectionContext) GetRemoteSliceGwId() string {
	if m != nil {
		return m.RemoteSliceGwId
	}
	return ""
}

func (m *SliceGwConnectionContext) GetRemoteSliceGwVpnIP() string {
	if m != nil {
		return m.RemoteSliceGwVpnIP
	}
	return ""
}

func (m *SliceGwConnectionContext) GetRemoteSliceGwHostType() SliceGwHostType {
	if m != nil {
		return m.RemoteSliceGwHostType
	}
	return SliceGwHostType_SLICE_GW_SERVER
}

func (m *SliceGwConnectionContext) GetRemoteSliceGwNsmSubnet() string {
	if m != nil {
		return m.RemoteSliceGwNsmSubnet
	}
	return ""
}

func (m *SliceGwConnectionContext) GetRemoteSliceGwNodeIP() string {
	if m != nil {
		return m.RemoteSliceGwNodeIP
	}
	return ""
}

func (m *SliceGwConnectionContext) GetRemoteSliceGwNodePort() string {
	if m != nil {
		return m.RemoteSliceGwNodePort
	}
	return ""
}

// Error is the generic error type which has
// a message and code to identify error
type Error struct {
	Code                 string   `protobuf:"bytes,1,opt,name=code,proto3" json:"code,omitempty"`
	Message              string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_a0d079cb73cd13d5, []int{7}
}

func (m *Error) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Error.Unmarshal(m, b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Error.Marshal(b, m, deterministic)
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return xxx_messageInfo_Error.Size(m)
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() string {
	if m != nil {
		return m.Code
	}
	return ""
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func init() {
	proto.RegisterEnum("sidecar.SliceGwHostType", SliceGwHostType_name, SliceGwHostType_value)
	proto.RegisterEnum("sidecar.TcType", TcType_name, TcType_value)
	proto.RegisterEnum("sidecar.ClassType", ClassType_name, ClassType_value)
	proto.RegisterEnum("sidecar.TunnelStatusType", TunnelStatusType_name, TunnelStatusType_value)
	proto.RegisterType((*SidecarResponse)(nil), "sidecar.SidecarResponse")
	proto.RegisterType((*SliceQosProfile)(nil), "sidecar.SliceQosProfile")
	proto.RegisterType((*TunnelInterfaceStatus)(nil), "sidecar.TunnelInterfaceStatus")
	proto.RegisterType((*NsmInterfaceStatus)(nil), "sidecar.NsmInterfaceStatus")
	proto.RegisterType((*GwPodStatus)(nil), "sidecar.GwPodStatus")
	proto.RegisterType((*RemoteGwVpnIP)(nil), "sidecar.RemoteGwVpnIP")
	proto.RegisterType((*SliceGwConnectionContext)(nil), "sidecar.SliceGwConnectionContext")
	proto.RegisterType((*Error)(nil), "sidecar.Error")
}

func init() {
	proto.RegisterFile("pkg/sidecar/sidecarpb/gw_sidecar.proto", fileDescriptor_a0d079cb73cd13d5)
}

var fileDescriptor_a0d079cb73cd13d5 = []byte{
	// 992 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x56, 0xc1, 0x72, 0xe2, 0x46,
	0x13, 0x06, 0xaf, 0xc1, 0xa6, 0x31, 0x46, 0xdb, 0x6b, 0x58, 0xfd, 0xde, 0x3f, 0x1b, 0x47, 0xb5,
	0xb5, 0x71, 0x51, 0x29, 0xd8, 0x90, 0x6c, 0x2e, 0x3e, 0x19, 0x4c, 0xb0, 0xaa, 0x58, 0x99, 0x0c,
	0xb2, 0x9d, 0xca, 0x85, 0x12, 0x62, 0x4c, 0x51, 0x0b, 0x1a, 0x45, 0x1a, 0xc2, 0xf2, 0x0a, 0x79,
	0x88, 0x3c, 0x49, 0x6e, 0xb9, 0xe4, 0xb1, 0x52, 0x9a, 0x91, 0x84, 0x24, 0xd8, 0xe4, 0x04, 0xfd,
	0x7d, 0xdd, 0xad, 0xe9, 0x6f, 0x7a, 0x7a, 0x06, 0xde, 0xba, 0x1f, 0x67, 0x2d, 0x7f, 0x3e, 0xa5,
	0xb6, 0xe5, 0x45, 0xbf, 0xee, 0xa4, 0x35, 0x5b, 0x8f, 0x43, 0xa3, 0xe9, 0x7a, 0x8c, 0x33, 0x3c,
	0x0a, 0xcd, 0xf3, 0x57, 0x33, 0xc6, 0x66, 0x0b, 0xda, 0x12, 0xf0, 0x64, 0xf5, 0xd4, 0xa2, 0x4b,
	0x97, 0x6f, 0xa4, 0x97, 0xd6, 0x82, 0xea, 0x48, 0xfa, 0x11, 0xea, 0xbb, 0xcc, 0xf1, 0x29, 0xfe,
	0x1f, 0x4a, 0x3e, 0xb7, 0xf8, 0xca, 0xff, 0xe0, 0xcf, 0xd4, 0xfc, 0x45, 0xfe, 0xb2, 0x44, 0xb6,
	0x80, 0xf6, 0xf7, 0x01, 0x54, 0x47, 0x8b, 0xb9, 0x4d, 0x7f, 0x62, 0xfe, 0xd0, 0x63, 0x4f, 0xf3,
	0x85, 0x8c, 0x08, 0x20, 0xc3, 0x5a, 0xd2, 0x38, 0x22, 0x02, 0x50, 0x85, 0x23, 0x61, 0xe8, 0x53,
	0xf5, 0x40, 0x70, 0x91, 0x89, 0x6f, 0xe1, 0xf4, 0xd7, 0x38, 0x8b, 0x08, 0x7e, 0x26, 0x1c, 0x32,
	0x28, 0x7e, 0x0d, 0x45, 0x6e, 0x9b, 0x1b, 0x97, 0xaa, 0x87, 0x17, 0xf9, 0xcb, 0xd3, 0x76, 0xb5,
	0x19, 0x95, 0x6a, 0x0a, 0x98, 0x84, 0x34, 0xbe, 0x83, 0x52, 0x77, 0x61, 0xf9, 0xbe, 0xf0, 0x2d,
	0x08, 0x5f, 0x8c, 0x7d, 0x63, 0x86, 0x6c, 0x9d, 0x82, 0xa5, 0x4f, 0xd6, 0x5d, 0x3a, 0x5f, 0xcc,
	0x9d, 0x99, 0x5a, 0xbc, 0xc8, 0x5f, 0x56, 0xc8, 0x16, 0x40, 0x0d, 0x4e, 0x26, 0xeb, 0xfe, 0xca,
	0xf2, 0x2c, 0x87, 0x53, 0x3a, 0x55, 0x8f, 0x84, 0x43, 0x0a, 0xc3, 0x73, 0x38, 0x76, 0xbd, 0x39,
	0xf3, 0xe6, 0x7c, 0xa3, 0x1e, 0x0b, 0x3e, 0xb6, 0x83, 0xec, 0x53, 0xdf, 0x76, 0xc5, 0xe7, 0xd4,
	0x92, 0x14, 0x26, 0x06, 0xb4, 0xdf, 0x0f, 0xa0, 0x66, 0xae, 0x1c, 0x87, 0x2e, 0x74, 0x87, 0x53,
	0xef, 0xc9, 0xb2, 0xe9, 0x48, 0xe8, 0x1c, 0x7c, 0xd7, 0xa1, 0x3c, 0x46, 0x43, 0x4d, 0x53, 0x58,
	0x20, 0xeb, 0x82, 0xd9, 0xd6, 0x42, 0x1f, 0x46, 0xb2, 0x86, 0x26, 0xd6, 0xa1, 0xe8, 0x52, 0xea,
	0xe9, 0xc3, 0x50, 0xce, 0xd0, 0x12, 0x11, 0x16, 0xa7, 0x8e, 0xbd, 0x11, 0x3a, 0x1e, 0x92, 0xc8,
	0x0c, 0x22, 0xf8, 0x27, 0x62, 0x71, 0x29, 0xda, 0x21, 0x09, 0xad, 0x00, 0xf7, 0x24, 0x5e, 0x94,
	0xb8, 0xb4, 0xf0, 0x35, 0x80, 0x6b, 0xd9, 0x1f, 0x29, 0x1f, 0x30, 0xdf, 0x17, 0xaa, 0x1c, 0x92,
	0x04, 0x82, 0xdf, 0x42, 0x51, 0x76, 0x8c, 0x50, 0xe4, 0xb4, 0xfd, 0xbf, 0xed, 0x86, 0x89, 0x7a,
	0x65, 0x99, 0x72, 0xeb, 0xa4, 0xa3, 0xf6, 0x00, 0x68, 0xf8, 0xcb, 0xac, 0x10, 0x0d, 0x50, 0x9c,
	0x04, 0x9a, 0x68, 0xb0, 0x1d, 0x1c, 0xcf, 0xa0, 0x10, 0x60, 0x91, 0x1c, 0xd2, 0xd0, 0xfe, 0x38,
	0x80, 0x72, 0x7f, 0x3d, 0x64, 0xd3, 0x30, 0x63, 0x1d, 0x8a, 0x0e, 0x9b, 0x52, 0x7d, 0x18, 0xe6,
	0x09, 0xad, 0x40, 0xf2, 0x99, 0xc5, 0xe9, 0xda, 0xda, 0x0c, 0xd9, 0x34, 0x4e, 0x92, 0xc2, 0x82,
	0x7e, 0xdd, 0xda, 0xc9, 0x7e, 0x4d, 0xa3, 0xd8, 0x81, 0x13, 0x9e, 0xa8, 0x53, 0xa8, 0x5d, 0x6e,
	0xbf, 0xce, 0x88, 0x90, 0xa9, 0x95, 0xa4, 0x62, 0xf0, 0x1a, 0x2a, 0xb2, 0xc2, 0xa7, 0x30, 0x49,
	0x41, 0x24, 0x79, 0x15, 0x27, 0xd9, 0x55, 0x8b, 0xa4, 0x23, 0xf0, 0x0d, 0x14, 0xa8, 0xe7, 0x31,
	0x4f, 0x6c, 0x5e, 0xb9, 0x7d, 0x1a, 0x87, 0xf6, 0x02, 0x94, 0x48, 0x52, 0x7b, 0x0f, 0x15, 0x42,
	0x97, 0x8c, 0xd3, 0xfe, 0xfa, 0xc1, 0x75, 0xf4, 0x21, 0xbe, 0x81, 0x8a, 0x97, 0x04, 0x42, 0xa1,
	0xd2, 0xa0, 0xf6, 0x67, 0x01, 0x54, 0x31, 0x07, 0xfa, 0xeb, 0x2e, 0x73, 0x1c, 0x6a, 0xf3, 0x39,
	0x73, 0xba, 0xcc, 0xe1, 0xf4, 0x13, 0x4f, 0x1e, 0xf9, 0xfc, 0xce, 0x91, 0x17, 0x6d, 0x1a, 0x86,
	0xc6, 0x33, 0x21, 0x83, 0xe2, 0x37, 0xf0, 0x3c, 0x89, 0xc8, 0x85, 0x48, 0xb5, 0x77, 0x09, 0x1c,
	0xc0, 0x59, 0x12, 0xbc, 0x65, 0x3e, 0x4f, 0x8c, 0x0b, 0x35, 0x2e, 0x3c, 0xc3, 0x93, 0xbd, 0x51,
	0xf8, 0x3d, 0xd4, 0x92, 0xb8, 0xe1, 0x2f, 0x47, 0xab, 0x89, 0x43, 0xb9, 0xd8, 0x82, 0x12, 0xd9,
	0x4f, 0x62, 0x13, 0x30, 0x45, 0xc8, 0x26, 0x2b, 0x8a, 0x90, 0x3d, 0x0c, 0xb6, 0xd3, 0x6b, 0x0e,
	0xd0, 0x21, 0xf3, 0xb8, 0x38, 0x4d, 0x25, 0xb2, 0x97, 0xc3, 0x4b, 0xa8, 0xca, 0x5d, 0xd8, 0xca,
	0x77, 0x2c, 0xdc, 0xb3, 0x70, 0xb0, 0x9a, 0x14, 0x24, 0x05, 0x94, 0x23, 0x68, 0x0f, 0x83, 0x06,
	0xd4, 0x52, 0x68, 0x2c, 0x21, 0xfc, 0x87, 0x84, 0xfb, 0xc3, 0xf0, 0x07, 0xa8, 0xa7, 0x88, 0xad,
	0x88, 0x65, 0xb1, 0x86, 0xcf, 0xb0, 0xf8, 0x0e, 0x5e, 0xa4, 0x19, 0x29, 0xe3, 0x89, 0x08, 0xda,
	0x47, 0x05, 0xbb, 0xb5, 0x03, 0x0b, 0x21, 0x2b, 0x72, 0xb7, 0xf6, 0x92, 0xda, 0x7b, 0x28, 0x88,
	0x53, 0x80, 0x08, 0x87, 0x36, 0x9b, 0x46, 0x53, 0x45, 0xfc, 0x0f, 0xda, 0x77, 0x49, 0x7d, 0xdf,
	0x9a, 0xd1, 0x68, 0xb4, 0x86, 0x66, 0xe3, 0x2a, 0xbc, 0xfc, 0x12, 0x95, 0xbe, 0x80, 0xea, 0x68,
	0xa0, 0x77, 0x7b, 0xe3, 0xfe, 0xe3, 0x78, 0xd4, 0x23, 0x0f, 0x3d, 0xa2, 0xe4, 0x52, 0x60, 0x77,
	0xa0, 0xf7, 0x0c, 0x53, 0xc9, 0x37, 0xbe, 0x84, 0xa2, 0xbc, 0xaf, 0xb0, 0x06, 0xcf, 0x3b, 0xd7,
	0xc6, 0xcd, 0xa3, 0x7e, 0x63, 0xde, 0x8e, 0xbb, 0x77, 0x86, 0x49, 0xee, 0x06, 0x4a, 0xae, 0xf1,
	0x45, 0xe2, 0xfa, 0xc2, 0x23, 0x78, 0x76, 0x6b, 0x76, 0x94, 0x5c, 0xf0, 0xc7, 0xec, 0xfc, 0xa8,
	0xe4, 0x1b, 0x37, 0xa0, 0x64, 0xc7, 0x27, 0xd6, 0x01, 0xfb, 0x8f, 0x63, 0xf3, 0xde, 0x30, 0x7a,
	0x83, 0xf1, 0xc8, 0xbc, 0x36, 0x7b, 0xe3, 0xfb, 0xa1, 0x92, 0x43, 0x15, 0xce, 0xb2, 0xf8, 0xcd,
	0xdd, 0xa3, 0xa1, 0xe4, 0xdb, 0x7f, 0x1d, 0x80, 0xd2, 0x5f, 0x87, 0x97, 0xfe, 0x88, 0x7a, 0xbf,
	0xcd, 0x6d, 0x8a, 0x57, 0x50, 0xea, 0x53, 0x1e, 0x8d, 0xc8, 0xa6, 0x7c, 0x31, 0x34, 0xa3, 0x17,
	0x43, 0xb3, 0x17, 0xbc, 0x18, 0xce, 0xcf, 0xe2, 0x26, 0x48, 0x0c, 0x54, 0x2d, 0x87, 0x3a, 0xbc,
	0x0c, 0x82, 0xa5, 0x2e, 0x72, 0x96, 0x44, 0x93, 0xb0, 0x1e, 0x87, 0xa4, 0x66, 0xcc, 0x67, 0x53,
	0xfd, 0x0c, 0x2f, 0xef, 0xdd, 0xa9, 0xc5, 0xe9, 0xee, 0x4c, 0xf9, 0x2a, 0xdb, 0x82, 0x3b, 0x2e,
	0xe7, 0x89, 0x2e, 0x4d, 0xbf, 0x69, 0xb4, 0x1c, 0x7e, 0x80, 0x9a, 0xcc, 0x9c, 0x7d, 0xbc, 0x64,
	0x5a, 0x7b, 0xcb, 0xfc, 0x5b, 0xba, 0x4e, 0xf9, 0x97, 0x52, 0xf3, 0x2a, 0xa4, 0x27, 0x45, 0x21,
	0xd4, 0x77, 0xff, 0x04, 0x00, 0x00, 0xff, 0xff, 0x46, 0x4d, 0xdd, 0xea, 0x9b, 0x09, 0x00, 0x00,
}
